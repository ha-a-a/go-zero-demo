// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bookUserFieldNames          = builder.RawFieldNames(&BookUser{})
	bookUserRows                = strings.Join(bookUserFieldNames, ",")
	bookUserRowsExpectAutoSet   = strings.Join(stringx.Remove(bookUserFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	bookUserRowsWithPlaceHolder = strings.Join(stringx.Remove(bookUserFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheBookUserIdPrefix     = "cache:bookUser:id:"
	cacheBookUserNumberPrefix = "cache:bookUser:number:"
	cacheBookUserNamePrefix   = "cache:bookUser:name:"
)

type (
	bookUserModel interface {
		Insert(ctx context.Context, data *BookUser) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*BookUser, error)
		FindOneByNumber(ctx context.Context, number string) (*BookUser, error)
		FindAllByName(ctx context.Context, name string) ([]*BookUser, error)
		Update(ctx context.Context, data *BookUser) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBookUserModel struct {
		sqlc.CachedConn
		table string
	}

	BookUser struct {
		Id         int64     `db:"id"`
		Number     string    `db:"number"`   // 唯一标志
		Name       string    `db:"name"`     // 用户名称
		Password   string    `db:"password"` // 用户密码
		Gender     string    `db:"gender"`   // 男｜女｜未公开
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
	}
)

func newBookUserModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultBookUserModel {
	return &defaultBookUserModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`book_user`",
	}
}

func (m *defaultBookUserModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	bookUserIdKey := fmt.Sprintf("%s%v", cacheBookUserIdPrefix, id)
	bookUserNumberKey := fmt.Sprintf("%s%v", cacheBookUserNumberPrefix, data.Number)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, bookUserIdKey, bookUserNumberKey)
	return err
}

func (m *defaultBookUserModel) FindOne(ctx context.Context, id int64) (*BookUser, error) {
	bookUserIdKey := fmt.Sprintf("%s%v", cacheBookUserIdPrefix, id)
	var resp BookUser
	err := m.QueryRowCtx(ctx, &resp, bookUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bookUserRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultBookUserModel) FindAllByName(ctx context.Context, name string) ([]*BookUser, error) {
	resp := make([]*BookUser, 0)
	query := fmt.Sprintf("select %s from %s where `name` = ? ", bookUserRows, m.table)
	if err := m.CachedConn.QueryRowsNoCache(&resp, query, name); err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *defaultBookUserModel) FindOneByNumber(ctx context.Context, number string) (*BookUser, error) {
	bookUserNumberKey := fmt.Sprintf("%s%v", cacheBookUserNumberPrefix, number)
	var resp BookUser
	err := m.QueryRowIndexCtx(ctx, &resp, bookUserNumberKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `number` = ? limit 1", bookUserRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, number); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBookUserModel) Insert(ctx context.Context, data *BookUser) (sql.Result, error) {
	bookUserIdKey := fmt.Sprintf("%s%v", cacheBookUserIdPrefix, data.Id)
	bookUserNumberKey := fmt.Sprintf("%s%v", cacheBookUserNumberPrefix, data.Number)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, bookUserRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Number, data.Name, data.Gender)
	}, bookUserIdKey, bookUserNumberKey)
	return ret, err
}

func (m *defaultBookUserModel) Update(ctx context.Context, newData *BookUser) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	bookUserIdKey := fmt.Sprintf("%s%v", cacheBookUserIdPrefix, data.Id)
	bookUserNumberKey := fmt.Sprintf("%s%v", cacheBookUserNumberPrefix, data.Number)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, bookUserRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Number, newData.Name, newData.Gender, newData.Id)
	}, bookUserIdKey, bookUserNumberKey)
	return err
}

func (m *defaultBookUserModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheBookUserIdPrefix, primary)
}

func (m *defaultBookUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bookUserRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultBookUserModel) tableName() string {
	return m.table
}
